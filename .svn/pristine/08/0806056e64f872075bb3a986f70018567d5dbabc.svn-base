import { Injectable } from '@angular/core';
import {HttpInterceptor} from './http-interceptor';
import {AlunoVO} from '../dominio/vo/aluno-vo';
import {ResponsavelAlunoVO} from '../dominio/vo/responsavel-aluno-vo';
import { Observable } from 'rxjs';
import {AbstractServicos} from './abstract.servicos';

import {RelatorioUtil} from '../utilitarios/relatorio-util';
import {Constantes} from '../utilitarios/constantes';

//atestados
import {FiltroAtestadosDTO} from '../dominio/dto/filtro-atestados-dto';
import {RegistroRelatorioAtestadosDTO} from '../dominio/relatorio-dto/registro-relatorio-atestado-dto';

//aniversariantes
import {FiltroAniversariantesDTO} from '../dominio/dto/filtro-aniversariantes-dto';
import {RegistroRelatorioAniversarianteDTO} from '../dominio/relatorio-dto/registro-relatorio-aniversariantes-dto';

//listarAlunos
import {FiltroAlunosDTO} from '../dominio/dto/filtro-alunos-dto';
import {RegistroRelatorioAlunosDTO} from '../dominio/relatorio-dto/registro-relatorio-alunos-dto';

import {AlunoFiltroDTO} from '../dominio/dto/aluno-filtro.dto';

@Injectable()
export class AlunoService extends AbstractServicos<AlunoVO> {

  protected uri: string = '/aluno';

  constructor(protected http: HttpInterceptor) {
      super();
   }

  public transformar(element: any): AlunoVO {
       let vo: AlunoVO = new AlunoVO();
       vo.transformar(element);
       return vo;
  };  

  public recuperarDadosParaCombos(): any  {
      return this.http
            .get(this.uri + '/inicializa')
            .map(dados => dados.json()
            );
  }

  public listarAniversariantes(filtro: FiltroAniversariantesDTO): any {
      return this.http
            .post(this.uri + '/rel-aniversariantes', JSON.stringify(filtro))
            .map(dados => {
                if (filtro.imprime){
                    return this.getURL(dados);
                }
                return this.transformarRetorno(dados.json());
            });
            
    
  }

  private transformarRetorno(dados: any): Array<RegistroRelatorioAniversarianteDTO> {
        let lista: Array<RegistroRelatorioAniversarianteDTO> = [];
        dados.forEach(dto => {
                    let retorno: RegistroRelatorioAniversarianteDTO = new RegistroRelatorioAniversarianteDTO();
                    retorno.transformar(dto);
                    lista.push(retorno);
                });
        return lista;
  }

  public listarAlunos(filtro: FiltroAlunosDTO): Observable<any> {
      let lista: Array<RegistroRelatorioAlunosDTO> = [];

      return this.http
            .post(this.uri + '/rel-alunos-turma', JSON.stringify(filtro))
            .map(dados => {
                if (filtro.imprime){
                    return this.getURL(dados);
                } else {
                    dados.json().forEach(dto => {
                        let retorno: RegistroRelatorioAlunosDTO = new RegistroRelatorioAlunosDTO();
                        retorno.transformar(dto);
                        lista.push(retorno);
                    });
                    return lista;
                }
            });
            
    
  }


  public listarAtestados(filtro: FiltroAtestadosDTO): Observable<any> {
      let listaAtestados: Array<RegistroRelatorioAtestadosDTO> = [];

      return this.http
            .post(this.uri + '/rel-atestados', JSON.stringify(filtro))
            .map(dados => {
                if (filtro.imprime){
                    return this.getURL(dados);
                } else {
                    dados.json().forEach(dto => {
                        let retorno: RegistroRelatorioAtestadosDTO = new RegistroRelatorioAtestadosDTO();
                        retorno.transformar(dto);
                        listaAtestados.push(retorno);
                    });
                    return listaAtestados;
                }
            });
            
    
  }

   public listarDadosAlunosParaCombos(): Observable<Array<AlunoVO>> {
      let listaAlunos: Array<AlunoVO> = [];
      return this.http
            .get(this.uri + '/lista-alunos')
            .map(dados => {
                dados.json().forEach(aluno => listaAlunos.push(new AlunoVO().montarAlunoBasico(aluno)));
                return listaAlunos;
            });
  }

  public pesquisarAluno(dtoFiltro: AlunoFiltroDTO): Observable<Array<AlunoVO>> {
      let listaAlunos: Array<AlunoVO> = [];
      return this.http
            .post(this.uri + '/pesquisar', JSON.stringify(dtoFiltro))
            .map(dados => {
                dados.json().forEach(registro => {
                    let vo : AlunoVO = new AlunoVO()
                    vo.transformar(registro);
                    listaAlunos.push(vo)
                });
                return listaAlunos;
            });
      
  }  
}
