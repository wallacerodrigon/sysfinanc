import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { CrudComponente } from '../../componentes/crud-componente/crud-componente.component';
import { ConciliacaoServiceService } from '../conciliacao-service.service';
import { GravacaoArquivoDto } from '../../dominio/dto/gravacao-arquivo-dto';
import { RequestOptionsArgs } from '@angular/http/src/interfaces';
import { RegistroExtratoDto } from '../../dominio/dto/registro-extrato-dto';

@Component({
  selector: 'app-processamento',
  templateUrl: './processamento.component.html',
  styleUrls: ['./processamento.component.css']
})
export class ProcessamentoComponent implements OnInit {

  private colunasPadrao: string[] = ["Descrição", "Data", "Documento", "Valor"];
  private colunasNaoConciliados: string[] = ["Descrição","Vencimento", "Documento", "Valor"];

  private listagemExtrato: RegistroExtratoDto[] = [];
  private listagemNaoConciliados: any[] = [];
  private listagemConciliados: any[] = [];

  private atributosExtrato: string[] = ["historico", "dataLancamento", "documento", "valor"];
  private atributosNaoConciliados: string[] = ["descricao", "data", "documento", "valor"];
  private atributosConciliados: string[] = ["descricao", "data", "documento", "valor"];

  private tamanhoExtrato: number = 0;
  private tamanhoNaoConciliados: number = 0;
  private tamanhoConciliados: number = 0;
  private conteudoArquivoBase64: string = null;

  @ViewChild("arquivo") arquivo: ElementRef;

  @ViewChild("listaNaoConciliados") tabelaNaoConciliados: CrudComponente;

  constructor(private servico: ConciliacaoServiceService) { }

  ngOnInit() {

      for(let i = 0; i < 15; i++){
          this.listagemNaoConciliados.push({
            "descricao":"Lançamento"+i,
            "data":"0"+i+"/01/2018",
            "documento":"-",
            "valor":"100,00"
          });
  
          this.listagemConciliados.push({
            "descricao":"Lançamento"+i,
            "data":"0"+i+"/01/2018",
            "documento":i,
            "valor":"100,00"
          });
    }
    
    this.tamanhoExtrato = 0;
    this.tamanhoNaoConciliados = this.listagemNaoConciliados.length;
    this.tamanhoConciliados = this.listagemConciliados.length;

  }

  associarExtratoLancamento(){

      let extratosMarcados: Array<any> = this.listagemExtrato.filter(extrato => extrato["selecionado"]);
      let lancamentosNaoConciliados: Array<any> = this.listagemNaoConciliados.filter(extrato => extrato["selecionado"]);

      if (extratosMarcados == null || extratosMarcados.length === 0 || 
        lancamentosNaoConciliados == null || lancamentosNaoConciliados.length === 0){
          alert('Selecione um extrato e um lançamento não conciliado');
          return false;
      }

      if (extratosMarcados.length > 1){
        alert('Selecione apenas um documento do extrato');
        return false;
      }
      let numDocumento: number = extratosMarcados[0].documento;
      lancamentosNaoConciliados = [];
      this.listagemNaoConciliados.forEach(lancamento => {
        if (lancamento["selecionado"]){
          lancamento.documento = numDocumento;
          this.listagemConciliados.push(lancamento);
        } else {
          lancamentosNaoConciliados.push(lancamento);
        }
      })

      this.listagemExtrato.forEach((data, index)=> {
          if (data["selecionado"]){
              this.listagemExtrato.splice(index, 1)
          }
      });
      
      this.tamanhoConciliados = this.listagemConciliados.length;

      this.listagemNaoConciliados = lancamentosNaoConciliados;
      this.tamanhoNaoConciliados = this.listagemNaoConciliados.length;
      this.tamanhoExtrato = this.listagemExtrato.length;
   }

   protected efetuarUpload(){
        this.listagemExtrato = [];
        this.tamanhoExtrato = 0;

        this.servico.enviarArquivo(new GravacaoArquivoDto(this.conteudoArquivoBase64))
            .subscribe(dados => {
                dados.json().forEach(element => {
                    this.listagemExtrato.push(new RegistroExtratoDto().transformar(element));            
                });
                this.tamanhoExtrato = this.listagemExtrato.length;
            },
            erro => console.log(erro));
   }

   private onFileChange(event) {
    let reader = new FileReader();
    if(event.target.files.length > 0) {
      let file = event.target.files[0];
      this.conteudoArquivoBase64 = file;
      reader.readAsDataURL(file);
      reader.onload = () => {
          this.conteudoArquivoBase64 = reader.result.split(',')[1];
      };      
    }
  }   

}
