package br.net.walltec.api.entidades;

import br.net.walltec.api.entidades.comum.EntidadeBasica;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "conta")
public class Conta extends EntidadeBasica<Conta> {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "co_conta")
    private Integer id;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "dt_cadastro")
    private Date dataCadastro;

    @Column(name = "no_descricao")
    private String descricao;

    //@Autowired
    @ManyToOne
    @JoinColumn(name = "co_tipoconta")
    private TipoConta tipoConta;

    @Column(name = "ln_fixa")
    private Boolean fixa;

    //@Autowired
    @OneToMany(mappedBy = "conta", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Parcela> listaParcelas;

    @Column(name = "ln_despesa")
    private Boolean despesa;

    //@Autowired
    @ManyToOne
    @JoinColumn(name = "co_usuario")
    private Usuario usuario;

    @ManyToOne
    @JoinColumn(name = "co_contaReceita")
    private Conta contaReceita;

    public Double getTotalParcelas() {
        return null;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getDataCadastro() {
        return dataCadastro;
    }

    public void setDataCadastro(Date dataCadastro) {
        this.dataCadastro = dataCadastro;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    public TipoConta getTipoConta() {
        return tipoConta;
    }

    public void setTipoConta(TipoConta tipoConta) {
        this.tipoConta = tipoConta;
    }

    public Boolean getFixa() {
        return fixa;
    }

    public void setFixa(Boolean fixa) {
        this.fixa = fixa;
    }

    public List<Parcela> getListaParcelas() {
        return listaParcelas;
    }

    public void setListaParcelas(List<Parcela> listaParcelas) {
        this.listaParcelas = listaParcelas;
    }

    public Boolean getDespesa() {
        return despesa;
    }

    public void setDespesa(Boolean despesa) {
        this.despesa = despesa;
    }

    public boolean isDespesa() {
        return getDespesa() != null && getDespesa();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Conta)) {
            return false;
        }
        Conta other = (Conta) obj;
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return String
                .format("Conta [id=%s, descricao=%s, tipoConta=%s, fixa=%s, despesa=%s]",
                        id, descricao, tipoConta, fixa, despesa);
    }

    public Usuario getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    /**
     * @return the contaReceita
     */
    public Conta getContaReceita() {
        return contaReceita;
    }

    /**
     * @param contaReceita the contaReceita to set
     */
    public void setContaReceita(Conta contaReceita) {
        this.contaReceita = contaReceita;
    }


}
 
