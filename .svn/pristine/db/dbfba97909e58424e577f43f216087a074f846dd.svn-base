/**
 * 
 */
package br.net.walltec.api.rest;

import java.time.temporal.ChronoUnit;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import br.net.walltec.api.dto.FiltraParcelasDto;
import br.net.walltec.api.dto.GravacaoArquivoDto;
import br.net.walltec.api.dto.UtilizacaoParcelasDto;
import br.net.walltec.api.excecoes.NegocioException;
import br.net.walltec.api.excecoes.WebServiceException;
import br.net.walltec.api.negocio.servicos.LancamentoServico;
import br.net.walltec.api.negocio.servicos.comum.CrudPadraoServico;
import br.net.walltec.api.rest.comum.RequisicaoRestPadrao;
import br.net.walltec.api.rest.dto.BaixaLancamentoDTO;
import br.net.walltec.api.rest.interceptors.RequisicaoInterceptor;
import br.net.walltec.api.utilitarios.UtilData;
import br.net.walltec.api.vo.LancamentoVO;
import br.net.walltec.api.vo.UtilizacaoLancamentoVO;


/**
 * @author Administrador
 * 
 */

//TODO: atualizar as urls para n?o ter infinitivo e sim substantivos.
//TODO: Seguir a seguinte padroniza??o: PUT - atualiza; POST - cria;
@Path("/lancamentos")
@Produces(value=MediaType.APPLICATION_JSON)
@Interceptors({RequisicaoInterceptor.class})

public class LancamentosRest extends RequisicaoRestPadrao<LancamentoVO> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Inject
	private LancamentoServico servico;


	@POST
    @Path(value="/buscarLancamentos")
	public Response buscarLancamentos(FiltraParcelasDto dto){
        try {
            return Response.ok(servico.listarParcelas(dto)).build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        } catch(Exception e){
            e.printStackTrace();
            throw new WebServiceException(e.getMessage());
        }
	}	

	@POST
	@Path(value="/baixar")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response baixarLancamento(BaixaLancamentoDTO dto){
        try {
            servico.baixarParcelas(dto.getListaIdsLancamentos());
            return Response.accepted().build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        }
    }
	
	
	@POST
	@Path(value="/utilizar")
	public Response utilizarLancamento(UtilizacaoParcelasDto dto){
        try {
            servico.utilizarLancamento(dto);
            return Response.accepted().build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        }
		
	}	

	@GET
	@Path(value="/listarHistoricoUso")
	public Response listarHistoricoUsos(@QueryParam("idLancamento") Integer idLancamento){
        try {
            List<UtilizacaoLancamentoVO> listarHistoricoUso = servico.listarHistoricoUso(idLancamento);
			return Response.ok(listarHistoricoUso).build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        }
    }


	@Override
	public CrudPadraoServico<?, ?> getServico() {
		return servico;
	}

	@Override
	public Response incluir(LancamentoVO objeto) throws WebServiceException {
        try {
        	Date dataFim = objeto.getDataFimStr() != null ? UtilData.getData(objeto.getDataFimStr(), UtilData.SEPARADOR_PADRAO) : null;
        	Date dataVencimento = UtilData.getData(objeto.getDataVencimentoStr(), UtilData.SEPARADOR_PADRAO);
        	
        	if (dataFim != null && dataFim.before(dataVencimento)) {
        		throw new WebServiceException("Data Fim n√£o deve ser menor do que a data de Vencimento!");
        	}
        	
            objeto = servico.incluirVO(objeto);
            
            if (dataFim != null) {
            	servico.gerarLancamentos(objeto, 
            			UtilData.somarData(dataVencimento, 1, ChronoUnit.MONTHS), 
            			dataFim);
            }
            
            return Response.ok().build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        } catch(Exception e){
            e.printStackTrace();
            throw new WebServiceException(e.getMessage());
        }
	}

	@Override
	public Response alterar(LancamentoVO objeto) throws WebServiceException {
        try {
            servico.alterarVO(objeto);
            return Response.ok(objeto.getId().toString()).build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        } catch(Exception e){
            e.printStackTrace();
            throw new WebServiceException(e.getMessage());
        }
	}

	@Override
	public Response excluir(Integer idChaveObjeto) throws WebServiceException {
        try {
            servico.excluir(idChaveObjeto);
            return Response.ok().build();
        } catch (NegocioException e) {
            throw new WebServiceException(e.getMessage());
        } catch(Exception e){
            e.printStackTrace();
            throw new WebServiceException(e.getMessage());
        }
	}
	
	@POST
	@Path("/gravar-arquivo")
	public Response gravarArquivo(GravacaoArquivoDto dto) throws WebServiceException {
		byte[] conteudoArquivoDesformatado = Base64.getDecoder().decode(dto.getArquivoBase64());
		
		lerConteudoArquivo(new String(conteudoArquivoDesformatado));
		
		return Response.ok(new String(conteudoArquivoDesformatado)).build();
	}
	
	/* (non-Javadoc)
	 * @see br.net.walltec.api.rest.RequisicaoRestPadrao#listar()
	 */
	@Override
	public Response listar() throws WebServiceException {
		return Response.noContent().build();
	}
	
	private void lerConteudoArquivo(String conteudo) throws WebServiceException {
		
		String[] linhas = conteudo.split("\n");
		
		for(int i = 9; i < linhas.length; i++) {
			if (linhas[i].contains("S A L D O")) {
				break;
			} else {
				System.out.println(linhas[i]);
			}
		}
		
	}
}


