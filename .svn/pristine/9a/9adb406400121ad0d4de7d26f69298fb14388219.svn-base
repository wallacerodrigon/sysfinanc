package br.net.walltec.api.negocio.servicos.impl;

import br.net.walltec.api.dto.FiltraParcelasDto;
import br.net.walltec.api.dto.UtilizacaoParcelasDto;
import br.net.walltec.api.entidades.FormaPagamento;
import br.net.walltec.api.entidades.Parcela;
import br.net.walltec.api.entidades.TipoConta;
import br.net.walltec.api.enums.EnumEstadoParcela;
import br.net.walltec.api.excecoes.CampoObrigatorioException;
import br.net.walltec.api.excecoes.NegocioException;
import br.net.walltec.api.excecoes.PersistenciaException;
import br.net.walltec.api.excecoes.RegistroNaoEncontradoException;
import br.net.walltec.api.negocio.servicos.AbstractCrudServicoPadrao;
import br.net.walltec.api.negocio.servicos.LancamentoServico;
import br.net.walltec.api.persistencia.dao.ContaDao;
import br.net.walltec.api.persistencia.dao.LancamentoDao;
import br.net.walltec.api.persistencia.dao.impl.ContaDaoImpl;
import br.net.walltec.api.persistencia.dao.impl.LancamentoDaoImpl;
import br.net.walltec.api.utilitarios.UtilData;
import br.net.walltec.api.vo.HistoricoUtilizacaoMensalVO;
import br.net.walltec.api.vo.LancamentoVO;
import br.net.walltec.api.vo.UtilizacaoLancamentoVO;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.transaction.Transactional;
import java.util.*;

@Named
public class LancamentoServicoImpl extends AbstractCrudServicoPadrao<Parcela, LancamentoVO> implements LancamentoServico {

    @Inject
    private EntityManager em;

    private ContaDao contaDao;

    private LancamentoDao lancamentoDao;

    @PostConstruct
    public void init() {
        contaDao = new ContaDaoImpl(em);
        lancamentoDao = new LancamentoDaoImpl(em);
    }

    @Override
    protected Class getClasseEntidade() {
        return Parcela.class;
    }

    @Override
    protected Class getClassePojo() {
        return LancamentoVO.class;
    }

    @Override
    public List<Parcela> listarParcelas(FiltraParcelasDto dtoFiltro) throws NegocioException {
        if (dtoFiltro == null){
            throw new CampoObrigatorioException("Lista de parcelas não informada!");
        }
        List<Parcela> listaParcelas = new ArrayList<Parcela>();
		/*0-todas
		1-pagas
		2-abertas*/
        try {
            listaParcelas = lancamentoDao.listarParcelas(dtoFiltro.getDataInicial(), dtoFiltro.getDataFinal(),
                    dtoFiltro.getIdConta(), dtoFiltro.getDescricaoConta(), EnumEstadoParcela.AMBAS,
                    dtoFiltro.getBolDespesas());
        } catch (PersistenciaException e) {
            throw new NegocioException(e);
        }
        return listaParcelas;
    }

    @Override
    public boolean baixarParcelas(List<Parcela> parcelas) throws NegocioException {
        if (parcelas == null || parcelas.size() == 0){
            throw new CampoObrigatorioException("Lista de parcelas não informada!");
        }
        try {
            for(Parcela parcela : parcelas) {
                LancamentoVO vo = new LancamentoVO();
                vo.setIdLancamento(parcela.getId());
                this.baixarLancamento(vo);
                return true;
            }
        } catch (PersistenciaException e) {
            throw new NegocioException(e);
        }

        return false;
    }

    @Override
    public boolean excluirParcelas(List<Parcela> parcelas) throws NegocioException {
        if (parcelas == null || parcelas.size() == 0){
            throw new CampoObrigatorioException("Lista de parcelas não informada!");
        }
        try {
            lancamentoDao.excluirParcelas((Parcela[])parcelas.toArray());
            return true;
        } catch(PersistenciaException pe){
            return false;
        }
    }

    @Override
    public void utilizarLancamento(UtilizacaoParcelasDto dtoUtilizacao) throws NegocioException {
        if (dtoUtilizacao == null){
            throw new CampoObrigatorioException("Dto de utilização não informado");
        } else if (dtoUtilizacao.getDataUtilizacao() == null || dtoUtilizacao.getFormaPagamento() == null ||
                dtoUtilizacao.getParcelaOrigem() == null || dtoUtilizacao.getValorUtilizado() == 0 ){
            throw new CampoObrigatorioException("Favor informar os dados para efetuar a utilização da parcela.");
        }
        Parcela parcela = null;
        try {
            parcela = lancamentoDao.find(dtoUtilizacao.getParcelaOrigem().getId());
            if (parcela == null){
                throw new RegistroNaoEncontradoException("Parcela de origem inexistente.");
            }

            if (dtoUtilizacao.getValorUtilizado() > parcela.getValor()){
                throw new NegocioException("Valor utilizado é maior que o saldo restante");
            } else if (UtilData.getDataSemHoras(dtoUtilizacao.getDataUtilizacao()).after( UtilData.getDataSemHoras(new Date()))) {
                throw new NegocioException("Data de utilização é superior à data atual.");
            } else {
                Double novoValor = parcela.getValor() - dtoUtilizacao.getValorUtilizado();
                Double valorUtilizado = parcela.getValorUtilizado() + dtoUtilizacao.getValorUtilizado();
                parcela.setValor(novoValor);
                parcela.setValorUtilizado(valorUtilizado);
                parcela.setBolConciliado(false);
                lancamentoDao.alterar(parcela);

                //incluir uma nova parcela utilizando a de origem
                incluirUtilizacaoParcela(parcela, dtoUtilizacao);

            }
        } catch (PersistenciaException e) {
            throw new NegocioException(e);
        }
    }

    private void incluirUtilizacaoParcela(Parcela parcelaOrigem, UtilizacaoParcelasDto dtoUso) throws PersistenciaException {
        Parcela parcelaUtilizada = new Parcela();
        parcelaUtilizada.setBolPaga(true);
        parcelaUtilizada.setConta(parcelaOrigem.getConta());
        parcelaUtilizada.setDataVencimento(dtoUso.getDataUtilizacao());
        parcelaUtilizada.setDescricao(parcelaOrigem.getDescricao());
        parcelaUtilizada.setFormaPagamento(parcelaOrigem.getFormaPagamento());
        parcelaUtilizada.setNumero(Short.valueOf("1"));
        parcelaUtilizada.setParcelaOrigem(parcelaOrigem);
        parcelaUtilizada.setValor(dtoUso.getValorUtilizado());
        parcelaUtilizada.setValorUtilizado(0.00);
        parcelaUtilizada.setBolConciliado(false);
        lancamentoDao.incluir(parcelaUtilizada);
    }

    @Override
    public List<UtilizacaoLancamentoVO> listarHistoricoUso(Integer idLancamento) throws NegocioException {
        List<Parcela> listaUtilizacao = null;

        List<UtilizacaoLancamentoVO> vos = new ArrayList<UtilizacaoLancamentoVO>();

        if (listaUtilizacao != null){
            for(Parcela pu : listaUtilizacao){
                UtilizacaoLancamentoVO vo = new UtilizacaoLancamentoVO();
                vo.setData(pu.getDataVencimento());
                vo.setDescricao(pu.getDescricao());
                vo.setValor(pu.getValor());
                vos.add(vo);
            }
        }

        return vos;
    }

    @Override
    public List<HistoricoUtilizacaoMensalVO> listarHistoricoUtilizacao(Date dataInicial, Date dataFinal) throws NegocioException {
        try {
            return lancamentoDao.listarHistoricoUtilizacao(dataInicial, dataFinal);
        } catch (PersistenciaException e) {
            throw new NegocioException(e);
        }
    }


    @Transactional(value= Transactional.TxType.REQUIRES_NEW)
    private boolean baixarLancamento(LancamentoVO lancamentoVo) throws PersistenciaException {
        Parcela p = lancamentoDao.find(lancamentoVo.getIdLancamento());
        p.setBolPaga(true);
        p.setDataVencimento(new Date());
        lancamentoDao.alterar(p);
        return true;
    }
}