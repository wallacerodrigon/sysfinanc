import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import {NgbModal} from '@ng-bootstrap/ng-bootstrap';
import { DialogService, DialogComponent } from "ng2-bootstrap-modal";  
import { ConfirmComponent } from '../mensagens/confirm.component';
import { Pipe } from '@angular/core';

@Component({
  selector: 'app-crud-componente',
  templateUrl: './crud-componente.component.html',
  styleUrls: ['./crud-componente.component.css'],
//  moduleId: this.moduleId,
})
export class CrudComponente implements OnInit {

    @Input() nomesColunas: Array<string>;
    @Input() atributosColunas: Array<string>;
    @Input() pipes: Array<Pipe>= []
    @Input() exibeFiltro: boolean = true;
    @Input() listaDados: Array<any>;
    @Input() tamanhoListagem: number = 0;

    @Input() mensagemExclusao: string;
    @Input() modalCadastro: any;

//eventos
    @Output() onExcluir = new EventEmitter<boolean>();
    @Output() onEditar = new EventEmitter<any>();
    @Output() onNovoRegistro = new EventEmitter();
    @Output() onFilter = new EventEmitter();
    @Output() onList = new EventEmitter();

    @Input() exibeNovo: boolean = true;
    
    
    public paginaAtual = 1;
    public itensPorPagina = 6;
    public indiceItem: number = -1;
    public itemSelecionado: any; 
    public target: any;

  constructor(public dialogService:DialogService) { }

  ngOnInit() {

  }

  excluir(item: any, indice: number){
      let disposable = this.dialogService.addDialog(ConfirmComponent, {
          title:'Exclusão', 
          message: this.mensagemExclusao || 'Confirma a exclusão do registro?' })
          .subscribe(confirmado=> {
              this._configurarItemSelecionado(item, indice);
              this.onExcluir.emit(confirmado);
          });
      setTimeout(()=>{
          disposable.unsubscribe();
      },10000);       
  }

  editar(item:any, indice: number){
        this._configurarItemSelecionado(item, indice);
        this.onEditar.emit();
  }

  abrirNovoRegistro(){
      this.onNovoRegistro.emit();
  }

  abrirFiltro(){
      this.onFilter.emit();
  }

  private _configurarItemSelecionado(item: any, indice: number){
        let indiceCalculado = this.paginaAtual === 1 ? indice : ((this.paginaAtual -1)* this.itensPorPagina)+indice;
        this.indiceItem = indiceCalculado;
        this.itemSelecionado = item;      
  }

  limparFiltro(){
        this.onList.emit();
  }

  get totalPaginas(): number {
       let qtdPaginas : number =  Math.trunc(this.listaDados.length / this.itensPorPagina);
       let resto: number = this.listaDados.length % this.itensPorPagina != 0 ? 1 : 0;

        return this.listaDados && this.listaDados.length > 0 ? qtdPaginas + resto : 0;
  }

}
