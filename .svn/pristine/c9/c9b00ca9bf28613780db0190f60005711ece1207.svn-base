package br.net.walltec.api.negocio.servicos.impl;

import br.net.walltec.api.dto.GeracaoParcelasDto;
import br.net.walltec.api.entidades.Conta;
import br.net.walltec.api.entidades.FormaPagamento;
import br.net.walltec.api.entidades.Parcela;
import br.net.walltec.api.enums.EnumEstadoParcela;
import br.net.walltec.api.excecoes.NegocioException;
import br.net.walltec.api.excecoes.PersistenciaException;
import br.net.walltec.api.negocio.servicos.AbstractCrudServicoPadrao;
import br.net.walltec.api.negocio.servicos.ContaServico;
import br.net.walltec.api.persistencia.dao.ContaDao;
import br.net.walltec.api.persistencia.dao.LancamentoDao;
import br.net.walltec.api.persistencia.dao.impl.ContaDaoImpl;
import br.net.walltec.api.persistencia.dao.impl.LancamentoDaoImpl;
import br.net.walltec.api.utilitarios.UtilData;
import br.net.walltec.api.vo.ContaVO;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Named
public class ContaServicoImpl extends AbstractCrudServicoPadrao<Conta, ContaVO> implements ContaServico {

    @Inject
    private EntityManager em;

    private ContaDao contaDao;

    private LancamentoDao lancamentoDao;

    @PostConstruct
    public void init(){
        contaDao = new ContaDaoImpl(em);
        lancamentoDao = new LancamentoDaoImpl(em);
    }

    @Override
    protected Class getClasseEntidade() {
        return Conta.class;
    }

    @Override
    protected Class getClassePojo() {
        return ContaVO.class;
    }

    @Override
    public List<Parcela> criarParcelas(GeracaoParcelasDto dto) throws NegocioException {
        Integer qtd = dto.getQuantidade();
        if (qtd != null && qtd > 0){
            Conta conta = this.find(dto.getIdConta());
            inicializarParcelas(conta);
            Map<Integer, Parcela> mapParcelasReceita = null;
            Integer numProxParcela = (conta.getId() != null)? recuperarNumeroUltimaParcela(conta)+1 : 1;
            Date dataVencimento = new Date( dto.getDataVencimentoInicial().getTime() );
            List<Parcela> listaParcelasGeradas = new ArrayList<Parcela>();
            int mes = 0;
            for(int i = 0; i < qtd; i++){
                mes = UtilData.getMes(dataVencimento);
                Parcela p = new Parcela();
                p.setNumero(numProxParcela.shortValue());
                p.setConta(conta);
                p.setDataVencimento(dataVencimento);
                p.setFormaPagamento(new FormaPagamento());
                p.getFormaPagamento().setId(dto.getIdFormaPagamento());
                p.setValor(dto.getValorVencimento());
                p.setDescricao(dto.getDescricaoParcela() != null && dto.getDescricaoParcela().length() > 0 ? dto.getDescricaoParcela() : conta.getDescricao());
                p.setParcelaOrigem(mapParcelasReceita!= null ? mapParcelasReceita.get(mes): p);
                p.setBolPaga(false);
                p.setValorUtilizado(0.00);
                p.setBolConciliado(false);
                if (!conta.getDespesa()){
                    p.setParcelaOrigem(p);
                }
                listaParcelasGeradas.add(p);

                dataVencimento = UtilData.somarData(dataVencimento, 1, ChronoUnit.MONTHS);
                numProxParcela++;
            }

            if (dto.getParcial() == null || !dto.getParcial().booleanValue()){
                conta.getListaParcelas().addAll(listaParcelasGeradas);
                super.alterar(conta);
                return conta.getListaParcelas();
            } else if (dto.getParcial()) {
                return listaParcelasGeradas;
            } else {
                return null;
            }
        } else {
            return null;
        }

    }

    @Override
    public List<Parcela> obterParcelas(Conta conta) throws NegocioException {
        try {
            return lancamentoDao.listarParcelas(
                    null, null, conta.getId(), null, EnumEstadoParcela.AMBAS, null);
        } catch (PersistenciaException e) {
            throw new NegocioException(e);
        }
    }

    @Override
    public Integer recuperarNumeroUltimaParcela(Conta conta) throws NegocioException {
        Conta contaBanco = this.find(conta.getId());
        inicializarParcelas(conta);

        if (contaBanco.getListaParcelas() != null && contaBanco.getListaParcelas().size() > 0){
            Parcela p = contaBanco.getListaParcelas().get(contaBanco.getListaParcelas().size()-1);
            return new Integer(p.getNumero());
        }
        return 1;
    }

    private void inicializarParcelas(Conta conta) {
        if (conta.getListaParcelas() == null){
            conta.setListaParcelas(new ArrayList<Parcela>());
        }
        //Hibernate.initialize(conta.getListaParcelas());

    }

}


